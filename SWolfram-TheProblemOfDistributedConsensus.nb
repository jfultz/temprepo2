(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     79561,       1546]
NotebookOptionsPosition[     63487,       1170]
NotebookOutlinePosition[     78792,       1531]
CellTagsIndexPosition[     78749,       1528]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"caEvaluateCompiled", "=", 
   RowBox[{"FunctionCompile", "[", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Typed", "[", 
         RowBox[{"rule", ",", 
          RowBox[{
           RowBox[{"TypeSpecifier", "[", "\"\<PackedArray\>\"", "]"}], "[", 
           RowBox[{"\"\<MachineInteger\>\"", ",", "1"}], "]"}]}], "]"}], ",", 
        RowBox[{"Typed", "[", 
         RowBox[{"rad", ",", "\"\<MachineInteger\>\""}], "]"}], ",", 
        RowBox[{"Typed", "[", 
         RowBox[{"init", ",", 
          RowBox[{
           RowBox[{"TypeSpecifier", "[", "\"\<PackedArray\>\"", "]"}], "[", 
           RowBox[{"\"\<MachineInteger\>\"", ",", "1"}], "]"}]}], "]"}], ",", 
        RowBox[{"Typed", "[", 
         RowBox[{"eventCount", ",", "\"\<Integer64\>\""}], "]"}]}], "}"}], 
      ",", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "state", ",", "position", ",", "substate", ",", "rulePart", ",", 
          "newCellValue"}], "}"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"state", "=", "init"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"position", "=", 
             RowBox[{"RandomInteger", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", 
                RowBox[{"Length", "[", "state", "]"}]}], "}"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"substate", "=", 
             RowBox[{"state", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"Length", "[", "state", "]"}], ",", "1"}], "]"}], 
                 " ", "&"}], " ", "/@", " ", 
                RowBox[{"Range", "[", 
                 RowBox[{
                  RowBox[{"position", "-", "rad"}], ",", 
                  RowBox[{"position", "+", "rad"}]}], "]"}]}], "]"}], "]"}]}],
             ";", "\[IndentingNewLine]", 
            RowBox[{"rulePart", "=", 
             RowBox[{
              RowBox[{"Fold", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "#1"}], "+", "#2"}], "&"}], ",", "0", ",", 
                "substate"}], "]"}], "+", "1"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"newCellValue", "=", 
             RowBox[{"rule", "[", 
              RowBox[{"[", "rulePart", "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"state", "[", 
              RowBox[{"[", "position", "]"}], "]"}], "=", "newCellValue"}], 
            ";"}], "\[IndentingNewLine]", ",", "eventCount"}], "]"}], ";", 
         "\[IndentingNewLine]", "state"}]}], "\[IndentingNewLine]", "]"}]}], 
     "]"}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8296968602226763`*^9, 3.829696882854486*^9}, 
   3.829697934478654*^9},
 CellID->987198503,ExpressionUUID->"3c4d9f3e-22d2-413a-8e63-b3eec9e6ffe7"],

Cell["Should be compiled for all machine targets:", "Text",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.829697819346984*^9, 3.829697826218842*^9}, 
   3.8296979344787617`*^9},
 CellID->386583199,ExpressionUUID->"6fc69350-14a2-4590-81ed-24815a56c9a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"caEvaluateCompiled", "=", 
   InterpretationBox[
    RowBox[{
     TagBox["CompiledCodeFunction",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              GraphicsBox[
               InsetBox[
                FormBox[
                 StyleBox["\"Code\"", 
                  GrayLevel[0.7], Bold, 8.267999999999999, StripOnInput -> 
                  False], TraditionalForm], {0, 0}], Background -> 
               GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}, ImageSizeCache -> {27., {0., 10.}}], 
               Frame -> True, FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Signature: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"Integer64\"", ",", "\"1\""}], "]"}], ",", 
                    "\"Integer64\"", ",", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"Integer64\"", ",", "\"1\""}], "]"}], ",", 
                    "\"Integer64\""}], "}"}], "\[Rule]", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"Integer64\"", ",", "\"1\""}], "]"}]}], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              GraphicsBox[
               InsetBox[
                FormBox[
                 StyleBox["\"Code\"", 
                  GrayLevel[0.7], Bold, 8.267999999999999, StripOnInput -> 
                  False], TraditionalForm], {0, 0}], Background -> 
               GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}, ImageSizeCache -> {27., {0., 10.}}], 
               Frame -> True, FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Signature: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"Integer64\"", ",", "\"1\""}], "]"}], ",", 
                    "\"Integer64\"", ",", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"Integer64\"", ",", "\"1\""}], "]"}], ",", 
                    "\"Integer64\""}], "}"}], "\[Rule]", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"Integer64\"", ",", "\"1\""}], "]"}]}], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    CompiledCodeFunction[
     Association["Signature" -> TypeSpecifier[{
          "PackedArray"["Integer64", 
           TypeFramework`TypeLiteral[1, "Integer64"]], "Integer64", 
          "PackedArray"["Integer64", 
           TypeFramework`TypeLiteral[1, "Integer64"]], "Integer64"} -> 
        "PackedArray"["Integer64", 
          TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
      Compile`Program[{}, 
        Function[{
          Typed[$CellContext`rule, 
           TypeSpecifier["PackedArray"]["MachineInteger", 1]], 
          Typed[$CellContext`rad, "MachineInteger"], 
          Typed[$CellContext`init, 
           TypeSpecifier["PackedArray"]["MachineInteger", 1]], 
          Typed[$CellContext`eventCount, "Integer64"]}, 
         Module[{$CellContext`state, $CellContext`position, \
$CellContext`substate, $CellContext`rulePart, $CellContext`newCellValue}, \
$CellContext`state = $CellContext`init; 
          Do[$CellContext`position = RandomInteger[{1, 
                Length[$CellContext`state]}]; $CellContext`substate = 
             Part[$CellContext`state, 
               Map[Mod[#, 
                 Length[$CellContext`state], 1]& , 
                
                Range[$CellContext`position - $CellContext`rad, \
$CellContext`position + $CellContext`rad]]]; $CellContext`rulePart = 
             Fold[2 # + #2& , 0, $CellContext`substate] + 
              1; $CellContext`newCellValue = 
             Part[$CellContext`rule, $CellContext`rulePart]; 
            Part[$CellContext`state, $CellContext`position] = \
$CellContext`newCellValue; 
            Null, $CellContext`eventCount]; $CellContext`state]]], 
      "ErrorFunction" -> Automatic, "InitializationName" -> 
      "Initialization_667648a7_ecf6_4a9d_97c7_f8cc07f5743e", "ExpressionName" -> 
      "Main_ExprInvocation", "CName" -> "Main_CInvocation", "FunctionName" -> 
      "Main", "SystemID" -> "MacOSX-x86-64", "VersionData" -> {12.3, 0, 0}, 
      "CompiledIR" -> Association["MacOSX-x86-64" -> ByteArray[CompressedData["
1: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
          "]], "Linux-x86-64" -> ByteArray[CompressedData["
1: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
jHZ0I2GDKAO6wzJm5c3CO9CEgTgTCgm6C3nCnOOQjlyEprMncs1EQIQxOM89
6UCEsKdShGF4hQhX/sDxDdXzMzETBOJuL6tPh2w8NJ1ldnsFmmenHXzQIEHG
+CbG6tC5eRtWZB+h3cZ41acLsIDGPcHROYbzjwICLIjYlzk9Hkl43z3BvBwj
vaNGekG1XnVzM2uO0GB9kkCy4NUKnumSmHkgynIoYjvifkG95aPbwV/Z2mhg
eXCMesmb7pWp+BGCcCFebMlf2EAnl1Kg6/hSUFm0YxeGlYA2rlj8521QYcDF
nEegiq450ayK1McnldnjV1VF4Fax4l9qsOkWWIEUvuZUHoj6Vm9c0ZD8vTp+
jtVdS75VXC2v+MBZxJvKVZVx7LTSm15o5/1hKVzEc0NX3VYvyfvhuzNg3o7v
qWK7FQSB9yLKdopVquu8HQ+pbl7z8l1BuPGbp4xjSViFN5eserPgOrmHqSmx
IxIE9YsoG2761VLqLTGOSAWyaENFNP8s4GAY5eCdkgOzRZgrDTbZQieQz2gk
k6csztsYQgFYJ0HWCRy9K6Ml58C6B+g6kZpiXfwidmGDzWm3JbJ1z1mc0aeN
2rmgIotgLihCqGQtUFJ5UUnl8Krur66T/xbLqCQtodCqayWW7CVxtX75K68g
iftXNWXi5vwS9JWe978EWD17WGAP8zYKEnJfAB/aSMTOOuGca8bJ3CgIAicI
l+PChNm0S97dDMM38NywEGw6VkyLJCWpkEP1OiWGAioOC2z6jXfo8W7Dl5qk
9Nc8FnAPSCNUr5thBEohsgo1OS/jcsi6jHrgD+LZwB8aYMQfA9cr/TFX9VnI
8UCjvxm5BAyLco24KSl0/+qDYC2eugcuyrXO2CjYk3eQxayfTQLLC3nQkiBe
asZWxL/FKgr/DtyixHda9V3I8R6jtwzHX7ZwyhkbVGxzQ5ozU0gXnEDF9oYv
jntx0qye+Jb0DBvLD8RhyahDPVRRONTbE1BwqN5HibGskkvJU7my48lPpoTI
rW8ygBPytiqdsFO5xuSUGKyZZMxFWMbnpMLM3/pxrjjsCbM3mXw115fEBcZW
Il1A/WOUef42BbE/F6t+G3qcPdfbBBU/RhW7im6ba0ZS3YnDSrq3wWCvJCEP
CtNQK5iVztIA3OaZKpWlp4rdRV+b5whnb8R+T7sEp+fwJnqwKYApgSZK4Ccl
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
ZDS1t/0sIuq/915sXAwCDKkvyvjy8JM8GazsaxKSPSNOVQ+eap2qXK6NLLy0
62bhLuep4U8XrD5szA7HzXVvm+Pl92rTEDDU1YtZJ5GoLG1KpreOVlcltiBV
wc9DZxzeYy4Axu7HG18efXKW+PP0FGR8Of5J/X8AtX+YQbb5LXtPrGr4l9ip
+vuVf4gPiOo+Ij6X37nG19KQntHvu42v7UF7ZYnG1/5Aj15MNnYqCVeYxOmm
KaDSXp68Ghgv7Z8qjbKBUbbpQ9z2F1NPChc5wmREgSf7+k/2DZ8cGqq4OFrx
+3gF4PDxSKxC3aP6V4eXXATFxO5dq4DN9J8dDW+RdwboX+q04c99/SPkS4px
0/uJ31MKOqPG5wKDfRj/6QPV2Om00mDHX6dtre6abrB7913du2xqV4fLXUjG
A72P29459eRCljUs1xX39OOpikLfeOA5otaBdq8ji8W/gULE8aJeturuk3uG
hro+5LRoNKOe92JvxevwW693Vb2OGr86PEmR5UhuZyl329SuiYm58lDWxJ2s
jjd2OiMjzBlsWZV2pvoOpBAjF4ix4sLh2Bmx8O+UAqwsUT2PnpaompFEMxEp
dQl6g172KgS9IgR2K7LXJWYlGTn/b02YHH3Xj57L+g8kBAwkfe4qyzpWBtXt
z7xr9WFcY1FvS1yrQdPqls0R5V+leD9Aq3iHFGnitqmJ1AuYx8j40fjW1vEz
reMdU++5AZ6y06zDIx/O9FV30J+KkWtKvXHgnMEDOY/ouFU1LvqTYCkrzxef
7QqTXWpK6JQ6Hpkq6dj8Csqw+3Lyu67LJYaP0UavVCRH9Tl+7qrMOq2qONMu
K5z6mLJed/rJfWXL8temO+hi9eXfrZglmZjqs6xZZD8rkJJzZCrIlkqg9n/8
x/AcVuBK3qSDaVPA38s747UZPiHImUDMZs3ML2cCyaZo6R9b+YF63TBvegWx
s91rtd0Xr/x9qLo0+aYuMnn3zVFwhoL2toxSnc2Ap/6x63RZD480zc0OVNdB
uxAt/723ddetql23hqYqqoaiFPicq8enXqQ86zRAa9WoT2UgDAdia6JOz28d
glB7dB7i7u2a+lT1B08kT5yxZyajjK3XIRdwbjWF01Fahqo+5EhFikxZNTBZ
vcsNKcl/S96zvAviIgTsrLo4cLZuwKh1YNvvU5uuLvpaEZra66ZAUf4dubxt
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
95quYlkc+H/bqQ28
          "]]], "orcInstance" -> 140373448223744, "orcModuleId" -> 1, 
      "targetMachineId" -> 140373447970304], 5481287872, 5481287664, 
     5481287744, 5481283584, 
     "{\"PackedArray\"[\"Integer64\", TypeFramework`TypeLiteral[1, \
\"Integer64\"]], \"Integer64\", \"PackedArray\"[\"Integer64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"Integer64\"} -> \"PackedArray\
\"[\"Integer64\", TypeFramework`TypeLiteral[1, \"Integer64\"]]"],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.829696892086376*^9, 3.8296969056462393`*^9}, 
   3.829697934483061*^9, {3.829774275099237*^9, 3.829774287329431*^9}},
 CellID->1165793418,ExpressionUUID->"0c58a181-cdd9-41ea-bc59-57c9bb8c79a5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomAsynchronousCellularAutomaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rn_", ",", "2", ",", "r_"}], "}"}], ",", "init_", ",", 
    RowBox[{"{", 
     RowBox[{"t_", ",", "ct_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"caEvaluateCompiled", "[", 
      RowBox[{
       RowBox[{"Reverse", "[", 
        RowBox[{"IntegerDigits", "[", 
         RowBox[{"rn", ",", "2", ",", 
          RowBox[{"2", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", "r"}], "+", "1"}], ")"}]}]}], "]"}], "]"}], ",", 
       "r", ",", "#", ",", "ct"}], "]"}], "&"}], ",", "init", ",", "t"}], 
   "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.829696965873382*^9, 3.829696987544943*^9}, {
   3.8296976481262407`*^9, 3.829697682413405*^9}, 3.829697934485886*^9},
 CellID->1996664745,ExpressionUUID->"09cf906f-47c8-4388-9fee-f9960814f4b6"],

Cell[BoxData[
 RowBox[{"BlockRandom", "[", 
  RowBox[{
   RowBox[{"SeedRandom", "[", "567", "]"}], ";", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{
     RowBox[{"RandomAsynchronousCellularAutomaton", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"232", ",", "2", ",", "1"}], "}"}], ",", 
       RowBox[{"RandomChoice", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{".7", ",", ".3"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], ",", "400"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"100", ",", "20"}], "}"}]}], "]"}], ",", 
     RowBox[{"ColorRules", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"0", "\[Rule]", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {Hue[0.15, 0.72, 1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->Hue[0.15, 0.72, 0.6666666666666667],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 
                1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"Hue", "[", 
               RowBox[{"0.15`", ",", "0.72`", ",", "1"}], "]"}], NumberMarks -> 
             False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               Hue[0.15, 0.72, 1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["HueColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          Hue[0.15, 0.72, 1],
          Editable->False,
          Selectable->False]}], ",", 
        RowBox[{"1", "\[Rule]", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {Hue[0.98, 1, 0.8200000000000001], 
               RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->Hue[0.98, 1., 0.5466666666666667],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 
                1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"Hue", "[", 
               RowBox[{"0.98`", ",", "1", ",", "0.8200000000000001`"}], "]"}],
              NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               Hue[0.98, 1, 0.8200000000000001]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["HueColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          Hue[0.98, 1, 0.8200000000000001],
          Editable->False,
          Selectable->False]}]}], "}"}]}], ",", 
     RowBox[{"MeshStyle", "\[Rule]", "Orange"}], ",", 
     RowBox[{"Frame", "\[Rule]", "None"}]}], "]"}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8296975824743*^9, 3.829697607614152*^9}, {
   3.829697724397533*^9, 3.829697806736013*^9}, {3.8296978806686697`*^9, 
   3.829697885841517*^9}, {3.8296979174155903`*^9, 3.829697918127204*^9}, 
   3.829820274805159*^9},
 CellID->1162181614,ExpressionUUID->"3fe392e9-540f-4050-9f18-784dba962073"]
}, Open  ]]
},
WindowSize->{1214., 790.5},
WindowMargins->{{Automatic, -5.5}, {-5.5, Automatic}},
PrintingCopies->1,
PrintingStartingPageNumber->1,
PrintingPageRange->{1, Automatic},
PageHeaders->{{
   Cell[
    TextData[{
      StyleBox[
       CounterBox["Page"], "PageNumber"], "   ", "|", "  ", 
      StyleBox["Title", "Header"]}], "Header", 
    CellMargins -> {{0, Inherited}, {Inherited, Inherited}}], None, None}, {
  None, None, 
   Cell[
    TextData[{
      StyleBox["Subtitle", "Header"], 
      StyleBox[
       RowBox[{
         StyleBox[" ", "Header"], " "}]], "|", "   ", 
      StyleBox[
       CounterBox["Page"], "PageNumber"]}], "Header", 
    CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}},
PageFooters->{{None, None, None}, {None, None, None}},
PageHeaderLines->{False, False},
PageFooterLines->{False, False},
PrintingOptions->{"FacingPages"->True,
"FirstPageFace"->Right,
"FirstPageFooter"->True,
"FirstPageHeader"->False},
TaggingRules->{
 "DocuToolsSettingsInternal" -> {
   "$PacletVersion" -> "0.9.2043", "$MVersion" -> "11.2", "$FlaggedVersion" -> 
    11.1}},
CreateCellID->True,
CellLabelAutoDelete->Automatic,
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (June 14, 2021)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Notebook"], PageWidth :> 770, CellLabelAutoDelete -> False, 
       DefaultNewCellStyle -> "Text", DefaultDockedCellStyle -> {}, 
       AutoStyleOptions -> {
        "FunctionLocalVariableStyle" -> None, "LocalVariableStyle" -> None, 
         "PatternVariableStyle" -> {FontSlant -> "Italic"}, 
         "StringStyle" -> {
          FontColor -> GrayLevel[0], ShowAutoStyles -> False, 
           ShowSyntaxStyles -> False, AutoNumberFormatting -> False}, 
         "UndefinedSymbolStyle" -> None}], 
      Cell[
       StyleData["Notebook", "Printout"], Magnification -> 0.65]}, Closed]], 
   Cell[
    StyleData["Toolbar"], Editable -> False, PageWidth :> DirectedInfinity[1],
     CellFrame -> {{False, False}, {False, False}}, 
    CellMargins -> {{0, 0}, {0, 0}}, CellFrameMargins -> {{10, 0}, {10, 10}}, 
    CellFrameColor -> RGBColor[0.932128, 0.927138, 0.503853], 
    ShowStringCharacters -> False, LineColor -> RGBColor[0, 0.36, 0.1], 
    FrontFaceColor -> RGBColor[0, 0.36, 0.1], GraphicsColor -> 
    RGBColor[0, 0.36, 0.1], FontFamily -> "Verdana", FontSize -> 11, 
    Magnification -> 1, FontColor -> RGBColor[0, 0.36, 0.1], Background -> 
    RGBColor[0, 0.36, 0.1], 
    FrameBoxOptions -> {
     Background -> RGBColor[0, 0.36, 0.1], FrameMargins -> 0, FrameStyle -> 
      RGBColor[1, 1, 1]}, 
    ActionMenuBoxOptions -> {
     Alignment -> Center, Appearance -> None, Evaluator -> Automatic, 
      ImageSize -> {50, 20}, MenuAppearance -> "Menu", Method -> "Queued"}, 
    ButtonBoxOptions -> {
     Appearance -> None, BaseStyle -> "ButtonTextStyle", Method -> 
      "Queued"}, $CellContext`BackFaceColor -> RGBColor[0, 0.36, 0.1]], 
   Cell[
    StyleData["ButtonTextStyle"], FontFamily -> "Verdana", FontWeight -> 
    "Plain", FontColor -> GrayLevel[1]], 
   Cell[
    StyleData["ActionMenuTextStyle"], FontSize -> 11, FontWeight -> "Plain", 
    FontColor -> GrayLevel[1]], 
   Cell[
    StyleData["DividerStyle"], FontSize -> 14, FontColor -> 
    RGBColor[1, 1, 1]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Title"], PageWidth :> 720, 
       CellMargins -> {{66, 10}, {5, 24}}, FontFamily -> "Georgia", FontSize -> 
       36, FontWeight -> "Regular", FontColor -> RGBColor[0.75, 0.2, 0.18]], 
      Cell[
       StyleData["Title", "Printout"], PageWidth :> 720, 
       CellMargins -> {{66, 10}, {5, 24}}, FontFamily -> "Georgia", FontSize -> 
       36, FontWeight -> "Regular", FontColor -> RGBColor[0.75, 0.2, 0.18]]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], FontFamily -> "Georgia", FontSize -> 18, 
       FontWeight -> "Regular", FontSlant -> "Italic", FontColor -> 
       RGBColor[0.75, 0.2, 0.18]], 
      Cell[
       StyleData["Section", "Printout"], FontFamily -> "Georgia", FontSize -> 
       18, FontWeight -> "Regular", FontSlant -> "Italic", FontColor -> 
       RGBColor[0.75, 0.2, 0.18]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Blockquote"], CellFrame -> {{False, False}, {True, True}}, 
       CellMargins -> {{60, 10}, {8, 8}}, CellFrameColor -> 
       RGBColor[0.13335, 0.13335, 0.13335], TextAlignment -> Center, 
       FontFamily -> "Georgia", FontSize -> 18, FontWeight -> "Regular", 
       FontSlant -> "Italic", FontColor -> 
       RGBColor[0.8862500000000001, 0.4157, 0.058800000000000005`]], 
      Cell[
       StyleData["Blockquote", "Printout"], 
       CellFrame -> {{False, False}, {True, True}}, CellFrameColor -> 
       RGBColor[0.13335, 0.13335, 0.13335], TextAlignment -> Center, 
       FontFamily -> "Georgia", FontSize -> 18, FontWeight -> "Regular", 
       FontSlant -> "Italic", FontColor -> 
       RGBColor[0.8862500000000001, 0.4157, 0.058800000000000005`]]}, 
     Closed]], 
   Cell[
    StyleData["Subsection"], CellMargins -> {{66, 10}, {4, 8}}, 
    LineSpacing -> {1, 1.5}, ParagraphSpacing -> {1., 0.}, FontFamily -> 
    "Source Sans Pro", FontSize -> 15, FontWeight -> "Bold", FontColor -> 
    RGBColor[0.2, 0.2, 0.2]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Date"], CellMargins -> {{66, 10}, {24, 2}}, FontFamily -> 
       "Georgia", FontSize -> 13], 
      Cell[
       StyleData["Date", "Printout"], CellMargins -> {{66, 10}, {24, 2}}, 
       FontFamily -> "Georgia", FontSize -> 13]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Text"], CellMargins -> {{66, 10}, {12, 12}}, 
       LineSpacing -> {1, 6}, ParagraphSpacing -> {1, 0}, FontFamily -> 
       "Georgia", FontSize -> 16, 
       OverscriptBoxOptions -> {DiacriticalPositioning -> True}], 
      Cell[
       StyleData["Text", "Printout"], CellMargins -> {{66, 10}, {12, 12}}, 
       LineSpacing -> {1, 6}, ParagraphSpacing -> {1, 0}, FontFamily -> 
       "Georgia", FontSize -> 16]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["InlineSymbol"], FontFamily -> "Source Code Pro"], 
      Cell[
       StyleData["InlineSymbol", "Printout"], FontFamily -> 
       "Source Code Pro"]}, Closed]], 
   Cell[
    StyleData["SuggestEditTemplateFlagNone"], Background -> 
    RGBColor[0.9, 0.88, 0.84], 
    TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        FrameBox[
         ButtonBox[#, BaseStyle -> "SuggestEditLink"], FrameMargins -> 1], 
        MouseAppearanceTag["LinkHand"]]& )}], 
   Cell[
    StyleData["SuggestEditTemplateFlagNoted"], Background -> 
    RGBColor[1, 0.9, 0.8], TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        FrameBox[
         ButtonBox[#, BaseStyle -> "SuggestEditLink"], FrameMargins -> 1], 
        MouseAppearanceTag["LinkHand"]]& )}], 
   Cell[
    StyleData["SuggestEditTemplateFlagUrgent"], Background -> 
    RGBColor[1, 0.85, 0.85], TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        FrameBox[
         ButtonBox[#, BaseStyle -> "SuggestEditLink"], FrameMargins -> 1], 
        MouseAppearanceTag["LinkHand"]]& )}], 
   Cell[
    StyleData["SuggestEditTemplateFlagStetted"], Background -> 
    RGBColor[0.9703703703703704, 0.9644444444444444, 0.9525925925925925], 
    TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        FrameBox[
         ButtonBox[#, BaseStyle -> "SuggestEditLink"], FrameMargins -> 1], 
        MouseAppearanceTag["LinkHand"]]& )}], 
   Cell[
    StyleData["SuggestEditLink"], 
    ButtonBoxOptions -> {
     Appearance -> None, 
      ButtonFunction :> ((Needs["DocuTools`"]; DocuTools`DocuToolsLoader[]; 
       DocuTools`FindEditButtonAndGenerateDialog[
         FirstCase[#, 
          Blank[][TaggingRules, {"SuggestedEdit" -> Pattern[$CellContext`a, 
               Blank[]]}] :> $CellContext`a, False, 2]])& ), ButtonSource -> 
      ButtonContents, Evaluator -> Automatic}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Hyperlink"], FontColor -> RGBColor[0.2, 0.5, 0.6]], 
      Cell[
       StyleData["Hyperlink", "Printout"], FontColor -> 
       RGBColor[0.2, 0.5, 0.6]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["FunctionLink"], FontFamily -> "Source Code Pro Semibold", 
       FontWeight -> "SemiBold", 
       PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, FontColor -> 
       RGBColor[0.2, 0.5, 0.6], 
       ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
            NotebookLocate[#2]}]& ), Evaluator -> None, Method -> "Queued"}], 
      Cell[
       StyleData["FunctionLink", "Printout"], FontFamily -> 
       "Source Code Pro Semibold", FontWeight -> "SemiBold", 
       PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, FontColor -> 
       RGBColor[0.2, 0.5, 0.6], 
       ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
            NotebookLocate[#2]}]& ), Evaluator -> None, Method -> "Queued"}]},
      Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["InlineCode"], MenuSortingValue -> 10000, StyleMenuListing -> 
       None, FontFamily -> "Source Code Pro Semibold"], 
      Cell[
       StyleData["InlineCode", "Printout"], MenuSortingValue -> 10000, 
       StyleMenuListing -> None, FontFamily -> "Source Code Pro Semibold", 
       FontSize -> 0.92 Inherited, FontWeight -> "SemiBold"]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["InputOnly"], CellMargins -> {{100, 10}, {10, 6}}, 
       MenuCommandKey :> "9", FontFamily -> "Source Sans Pro", FontSize -> 
       15], 
      Cell[
       StyleData["InputOnly", "Printout"], CellMargins -> {{66, 10}, {10, 6}},
        MenuCommandKey :> "9", FontFamily -> "Source Sans Pro", FontSize -> 
       15]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Input"], CellMargins -> {{100, 10}, {5, 6}}, MenuCommandKey :> 
       "9", FontFamily -> "Source Sans Pro", FontSize -> 15], 
      Cell[
       StyleData["Input", "Printout"], CellMargins -> {{100, 10}, {5, 6}}, 
       MenuCommandKey :> "9", FontFamily -> "Source Sans Pro", FontSize -> 
       15]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["OutputOnly"], CellMargins -> {{100, 10}, {14, 10}}, 
       FontFamily -> "Source Sans Pro", FontSize -> 15], 
      Cell[
       StyleData["OutputOnly", "Printout"], 
       CellMargins -> {{66, 10}, {14, 10}}, FontFamily -> "Source Sans Pro", 
       FontSize -> 15]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Output"], CellMargins -> {{100, 10}, {14, 5}}, FontSize -> 
       15], 
      Cell[
       StyleData["Output", "Printout"], CellMargins -> {{100, 10}, {14, 5}}, 
       FontSize -> 15]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Program"], CellFrame -> False, 
       CellMargins -> {{100, 4}, {8, 8}}, MenuSortingValue -> 8000], 
      Cell[
       StyleData["Program", "Printout"], CellFrame -> False, 
       CellMargins -> {{100, 4}, {8, 8}}, MenuSortingValue -> 8000]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Picture"], CellMargins -> {{100, 10}, {14, 5}}, 
       LineSpacing -> {1.25, 0, 1}, MenuSortingValue -> 6000], 
      Cell[
       StyleData["Picture", "Printout"], 
       CellMargins -> {{66, Inherited}, {8, 8}}, MenuSortingValue -> 6000]}, 
     Closed]], 
   Cell[
    StyleData["InputForm"], PageWidth :> DirectedInfinity[1], 
    InputAutoReplacements -> {}, AllowInlineCells -> False, Hyphenation -> 
    False, AutoQuoteCharacters -> {}, PasteAutoQuoteCharacters -> {}, 
    AutoSpacing -> False, NumberMarks -> True, AutoNumberFormatting -> False, 
    StyleMenuListing -> None, FontFamily -> "Source Sans Pro", 
    PrivateFontOptions -> {"OperatorSubstitution" -> True}], 
   Cell[
    StyleData["OutputForm"], PageWidth :> DirectedInfinity[1], TextAlignment -> 
    Left, LineSpacing -> {0.6, 1}, AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, StyleMenuListing -> None, FontFamily -> 
    "Source Sans Pro", 
    PrivateFontOptions -> {"OperatorSubstitution" -> True}], 
   Cell[
    StyleData["StandardForm"], 
    InputAutoReplacements -> {
     "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> "\[LessEqual]", 
      ">=" -> "\[GreaterEqual]", "!=" -> "\[NotEqual]", "==" -> "\[Equal]", 
      "@>" -> "\[InlinePart]", "<->" -> "\[UndirectedEdge]", ParentList}, 
    LineSpacing -> {1.25, 0, 2}, SingleLetterItalics -> False, 
    StyleMenuListing -> None, FontFamily -> "Source Sans Pro", 
    PrivateFontOptions -> {"OperatorSubstitution" -> True}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["DraftNote", StyleDefinitions -> StyleData["Text"]], 
       CellMargins -> {{66, 10}, {2, 12}}, MenuSortingValue -> 10000, 
       StyleMenuListing -> Automatic, FontFamily -> "Helvetica", FontSize -> 
       12, FontColor -> GrayLevel[0.4]], 
      Cell[
       StyleData["DraftNote", "Printout"], CellMargins -> {{66, 10}, {2, 12}},
        MenuSortingValue -> 10000, StyleMenuListing -> Automatic, FontFamily -> 
       "Helvetica", FontSize -> 12, FontColor -> GrayLevel[0.4]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["TextAnnotation"], CellFrame -> 1, CellFrameColor -> 
       RGBColor[0.8, 0, 0], AutoSpacing -> False, LineIndent -> Automatic, 
       FontSize -> 11, FontWeight -> "Plain", FontColor -> 
       RGBColor[0.4, 0.2, 0.2], Background -> GrayLevel[0.999]], 
      Cell[
       StyleData["TextAnnotation", "Printout"]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["TextAnnotationButton"], Editable -> False, FontFamily -> 
       "Verdana", FontSize -> 9, 
       ButtonBoxOptions -> {
        Active -> True, Appearance -> "DialogBox", 
         ButtonFunction :> (Needs["DocuTools`"]; 
          DocuTools`GenerateAnnotationDialog[]), ButtonMargins -> 1, 
         Evaluator -> Automatic, Method -> "Queued"}], 
      Cell[
       StyleData["TextAnnotationButton", "Printout"]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["TextAnnotator"], Editable -> False, FontFamily -> "Verdana",
        FontSize -> 9], 
      Cell[
       StyleData["TextAnnotator", "Printout"]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["TextAnnotationRemoveButton"], Editable -> False, FontFamily -> 
       "Verdana", FontSize -> 9, 
       ButtonBoxOptions -> {
        Active -> True, Appearance -> "DialogBox", 
         ButtonFunction :> (Needs["DocuTools`"]; 
          DocuTools`AnnotationRemove[DocuTools`CalledFromFrameLabel -> True]),
          ButtonMargins -> 1, Evaluator -> Automatic, Method -> "Queued"}], 
      Cell[
       StyleData["TextAnnotationRemoveButton", "Printout"]]}, Closed]]}, 
  Visible -> False, FrontEndVersion -> 
  "12.3 for Microsoft Windows (64-bit) (June 14, 2021)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"91808d4b-a269-4968-8a41-f3f8efd0916f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 3230, 77, 431, "Input",ExpressionUUID->"3c4d9f3e-22d2-413a-8e63-b3eec9e6ffe7",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellID->987198503],
Cell[3813, 101, 283, 4, 43, "Text",ExpressionUUID->"6fc69350-14a2-4590-81ed-24815a56c9a6",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellID->386583199],
Cell[4099, 107, 53184, 905, 88, "Input",ExpressionUUID->"0c58a181-cdd9-41ea-bc59-57c9bb8c79a5",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellID->1165793418],
Cell[57286, 1014, 990, 25, 54, "Input",ExpressionUUID->"09cf906f-47c8-4388-9fee-f9960814f4b6",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellID->1996664745],
Cell[58279, 1041, 5192, 126, 101, "Input",ExpressionUUID->"3fe392e9-540f-4050-9f18-784dba962073",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellID->1162181614]
}, Open  ]]
}
]
*)

